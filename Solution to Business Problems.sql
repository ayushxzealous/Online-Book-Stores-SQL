-- Solution to Business Problems

-- Q1: Find books published after the year 1950
SELECT * FROM books 
WHERE published_year > '1950'
ORDER BY published_year ASC;


-- Q2: Show orders placed in November 2023
SELECT * FROM
        (SELECT *, EXTRACT(MONTH FROM order_date) 
		   AS order_month
           FROM orders)
WHERE order_month = '11';


-- Q3: Retrieve the total stock of books available
SELECT SUM(stock) AS total_stock
FROM books;


-- Q4: Retrieve all orders where the total amount exceeds $20
SELECT * FROM orders
WHERE total_amount > 20
ORDER BY total_amount DESC;


-- Q5: Find total number of books in stock grouped by genre
SELECT genre, SUM(stock) AS stock
FROM books
GROUP BY genre;


-- Q6: List top 5 customers who ordered the most books
SELECT 
    c.Name, 
    SUM(o.Quantity) AS Total_Books_Ordered
FROM Orders o
JOIN Customers c ON c.Customer_ID = o.Customer_ID
GROUP BY c.Customer_ID, c.Name
ORDER BY Total_Books_Ordered DESC
LIMIT 5;


-- Q7: Retrieve the total number of books sold for each genre

SELECT b.Genre, SUM(o.Quantity) AS Total_Sold_Books
FROM Orders o
JOIN Books b ON o.Book_ID = b.Book_ID
GROUP BY b.Genre
ORDER BY b.Genre;


-- Q8: List customers who have placed at least 2 orders
SELECT c.name, o.quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE quantity BETWEEN 2 AND 6
ORDER BY quantity;


-- Q9: Find the most frequently ordered book
SELECT o.book_id, b.title, SUM(o.order_id) AS order_count
FROM orders o
JOIN books b ON o.book_id = b.book_id
GROUP BY o.book_id, b.title
ORDER BY order_count DESC;


-- Q10: Retrieve the total quantity of books sold by each author
SELECT b.author, SUM(o.quantity) AS books_sold
FROM books b
JOIN orders o ON b.book_id=o.book_id
GROUP BY b.author;


-- Q11: List the cities where customers who spent over $200 are located
SELECT c.city, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id=o.customer_id
GROUP BY c.city
HAVING SUM(o.total_amount) > 200;


-- Q12: Find top 5 customers who spent the most on orders
SELECT DISTINCT c.name, total_amount
FROM orders o
JOIN customers c ON o.customer_id=c.customer_id
ORDER BY total_amount DESC LIMIT 5;


-- Q13: Calculate the stock remaining after fulfilling all orders
SELECT 
   b.book_id, 
   b.title, 
   b.stock - COALESCE(SUM(o.quantity),0) AS stocks_left
FROM books b
LEFT JOIN orders o ON b.book_id=o.book_id
GROUP BY b.book_id, b.title, b.stock
HAVING (b.Stock - COALESCE(SUM(o.Quantity), 0))>0
ORDER BY stocks_left;


-- Q14: Find the total revenue generated by each genre
SELECT b.genre, SUM(o.total_amount) AS total_revenue
FROM orders o
JOIN books b ON o.book_id = b.book_id
GROUP BY b.genre
ORDER BY total_revenue DESC;


-- Q15: List customers who ordered books from more than 1 genre
SELECT c.customer_id, c.name, COUNT(DISTINCT b.genre) AS genre_count
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN books b ON o.book_id = b.book_id
GROUP BY c.customer_id, c.name
HAVING COUNT(DISTINCT b.genre) > 1;


-- Q16: Get the month-wise total orders placed
SELECT DATE_TRUNC('month', o.order_date) AS order_month,
       COUNT(*) AS total_orders
FROM orders o
GROUP BY order_month
ORDER BY order_month;


-- Q17: Which books are low in stock (less than 5 units left after orders)?
SELECT 
    b.title,
    b.stock - COALESCE(SUM(o.quantity), 0) AS stock_left
FROM books b
LEFT JOIN orders o ON b.book_id = o.book_id
GROUP BY b.book_id, b.title, b.stock
HAVING (b.stock - COALESCE(SUM(o.quantity), 0)) < 5;


-- Q18: For each customer, show total books ordered and total amount spent
SELECT 
    c.name,
    SUM(o.quantity) AS total_books_ordered,
    SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.name;


-- Q19: Show genres where more than 100 books have been sold
SELECT b.genre, SUM(o.quantity) AS total_sold
FROM orders o
JOIN books b ON o.book_ID = b.book_id
GROUP BY b.genre
HAVING SUM(o.quantity) > 100;


-- Q20: Rank customers based on total spending using RANK()
SELECT 
    c.name,
    SUM(o.total_amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name;