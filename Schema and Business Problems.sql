-- Create Tables

DROP TABLE IF EXISTS Books;
CREATE TABLE Books (
    Book_ID SERIAL PRIMARY KEY,
    Title VARCHAR(100),
    Author VARCHAR(100),
    Genre VARCHAR(50),
    Published_Year INT,
    Price NUMERIC(10, 2),
    Stock INT
);

DROP TABLE IF EXISTS customers;
CREATE TABLE Customers (
    Customer_ID SERIAL PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    City VARCHAR(50),
    Country VARCHAR(150)
);

DROP TABLE IF EXISTS orders;
CREATE TABLE Orders (
    Order_ID SERIAL PRIMARY KEY,
    Customer_ID INT REFERENCES Customers(Customer_ID),
    Book_ID INT REFERENCES Books(Book_ID),
    Order_Date DATE,
    Quantity INT,
    Total_Amount NUMERIC(10, 2)
);

SELECT * FROM orders;
SELECT * FROM books;
SELECT * FROM customers;


-- Business Problems

Q1: Find books published after the year 1950
Q2: Show orders placed in November 2023
Q3: Retrieve the total stock of books available
Q4: Retrieve all orders where the total amount exceeds $20
Q5: Find total number of books in stock grouped by genre
Q6: List top 5 customers who ordered the most books
Q7: Retrieve the total number of books sold for each genre
Q8: List customers who have placed at least 2 orders
Q9: Find the most frequently ordered book
Q10: Retrieve the total quantity of books sold by each author
Q11: List the cities where customers who spent over $200 are located
Q12: Find top 5 customers who spent the most on orders
Q13: Calculate the stock remaining after fulfilling all orders
Q14: Find the total revenue generated by each genre
Q15: List customers who ordered books from more than 1 genre
Q16: Get the month-wise total orders placed
Q17: Which books are low in stock (less than 5 units left after orders)?
Q18: For each customer, show total books ordered and total amount spent
Q19: Show genres where more than 100 books have been sold
Q20: Rank customers based on total spending using RANK()
